Initial 6502 experimentation for the tgl6502 - as an experimental target
to play with 6502isms easily

See:
http://thegaragelab.com/programming-the-tgl-6502/

You need a cc65 git tree, released cc65 can't compile Fuzix as it lacks a
compiler bug fix I contributed.

Our memory mapping looks like this

	0x0000		ZP
	0x0100		6502 Stack (per proc) 
	0x0200		C stack (per proc)
	0x0400		I stack (per proc)
	0x0500		Udata actual data per proc
	0x0600+		Common copy

	0x2000		Kernel data	(8K)
	0x4000		Kernel data	(48K)

This ensures we can do all our stack flips in one operation when we switch
process in switchin.




Lots not yet done:

tricks.s is basically stubs for the 6502 code
signal checks are not being done on the syscall path (or irq path)

We hackishly chop up and share the 6502 256 byte system stack. Probably we
should just check for overflows and kill, or perhaps copy stacks in/out if
it would otherwise run out ?

Memory set up for now is banking, because we'll need swap and bank16k+swap
still needs significant work on the I/O side of things.

Lots of memory to save in kernel space by making the common and data copies
come from a bank we then switch out, along perhaps with the const data from
what would be discard areas on the Z80.



To build:
Set the platform/target
make clean
make
tools/tglsplice

and you'll get a 6502.rom

TODO
----
- usermem functionality
- debug syscall paths
- memory layout for apps - do we go for compile time stack setting with
  the ease of brk() handling and nice mappings that gives us ?
- Core kernel knows about brk() and stacks. What it knows is unfortunately
  wrong for 6502.
- Build a libc

Fairly Essential Optimsations To Do For A Box This Slow on RAM
--------------------------------------------------------------

- Fast copy via spi buffer hack
- Use bank mode not 48K fixed so we can get more processes in (we don't
  have user overlapping common so swap can be done eventually too)
- Only copy the needed memory when forking, not 48K (in theory we are copying
  low->brk, sp->top, S->top of page, and Z)
- execve direct read to usermem (core change)
- vfork()


Other Questions
---------------

- What would it take to make ld65 generate banked binaries for 6502 boxes.
  The C argument stack is separate from the call/return stack so the usual
  horrible argument magic is avoided. It would just need stubs for inter
  bank calling added by the linker somehow, along with allowing multiple
  memory regions at the same address with different output files
